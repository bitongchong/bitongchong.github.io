<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BITC＇BLOG</title>
  
  <subtitle>DO YOUR WORK</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bitongchong.github.io/"/>
  <updated>2018-03-13T08:31:23.325Z</updated>
  <id>https://bitongchong.github.io/</id>
  
  <author>
    <name>BIT C</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从c到python的一小时</title>
    <link href="https://bitongchong.github.io/2018/03/11/201803112146/"/>
    <id>https://bitongchong.github.io/2018/03/11/201803112146/</id>
    <published>2018-03-11T13:55:03.175Z</published>
    <updated>2018-03-13T08:31:23.325Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006CQOKjgy1fp97udq7psj30eg07jwee.jpg" alt=""></p><h1 id="从c到python的一小时"><a href="#从c到python的一小时" class="headerlink" title="从c到python的一小时"></a>从c到python的一小时</h1><p>注：</p><p>1、本文非0基础教程，需要有较好的c语言基础。</p><p>2、本文基于<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰python教程</a>，需要进一步深入学习python的，可以点击学习。</p><p>3、学习完本文，并非代表入门python，而是大致了解python与c有哪些较为明显的差别，触类旁通，从而大幅度缩减时间，达到一小时学习python的目的。</p><h2 id="list与tuple"><a href="#list与tuple" class="headerlink" title="list与tuple"></a>list与tuple</h2><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><h4 id="is-what"><a href="#is-what" class="headerlink" title="is what"></a>is what</h4><p>list是python内置的一种数据类型——列表。</p><p>可变有序，支持随时添加删改。</p><p>缺点：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol><h4 id="how-to-use"><a href="#how-to-use" class="headerlink" title="how to use"></a>how to use</h4><p>利用<code>len()</code>函数获取元素个数。</p><p>list的元素访问通过索引实现，索引由0开始。</p><p>当索引超出范围时，会报<code>IndexError</code>错误，因此需牢记最后一个元素的索引是<code>len(classmates) - 1</code>。</p><p>可以通过<code>-1</code>做索引，直接获取最后一个元素，以此类推<code>-2、-3... ...</code> 越界会报错。</p><p>添加元素到末尾：<code>xxx.append(data)</code></p><p>添加到指定位置（如n）：<code>xxx.insert(n,data)</code></p><p>删除list末尾元素：<code>pop(data)</code></p><p>删除指定位置（如n）：<code>pop(n)</code></p><p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置</p><p>list里面的元素的数据类型也可以不同</p><p>list元素也可以是另一个list</p><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><h4 id="is-what-1"><a href="#is-what-1" class="headerlink" title="is what"></a>is what</h4><p>另一种有序列表叫元组：tuple，与list非常类似，但是一旦初始化就不能修改（不能修改是指tuple指向不变）</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001387269705541ad608276b6f7426ca59b8c2b19947243000/0" alt="tuple-0"></p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001387269768140c7d5ca167342402989dfc75343fe900b000/0" alt="tuple-1"></p><h4 id="how-to-use-1"><a href="#how-to-use-1" class="headerlink" title="how to use"></a>how to use</h4><p>显示只有1个元素的tuple时，会加一个逗号<code>,</code> （如：<code>t = (1,)</code>），以免你误解成数学计算意义上的括号。</p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if语句后加上 <code>:</code></p><p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code>，所以<code>if</code>语句的完整形式就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if &lt;条件判断1&gt;:</span><br><span class="line">    &lt;执行1&gt;</span><br><span class="line">elif &lt;条件判断2&gt;:</span><br><span class="line">    &lt;执行2&gt;</span><br><span class="line">elif &lt;条件判断3&gt;:</span><br><span class="line">    &lt;执行3&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;执行4&gt;</span><br></pre></td></tr></table></figure><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p><code>input()</code>返回的数据类型是<code>str</code>，<code>str</code>不能直接和整数比较，必须先通过<code>int()</code>把<code>str</code>转换成整数。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p>可以依次把list或tuple中的每个元素迭代出来</p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>条件满足，就不断循环，条件不满足时退出循环</p><h4 id="循环-1"><a href="#循环-1" class="headerlink" title="循环"></a>循环</h4><p>阅读: 568250</p><hr><h3 id="循环-2"><a href="#循环-2" class="headerlink" title="循环"></a>循环</h3><p>要计算1+2+3，我们可以直接写表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1 + 2 + 3</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>要计算1+2+3+…+10，勉强也能写出来。</p><p>但是，要计算1+2+3+…+10000，直接写表达式就不可能了。</p><p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p><p>Python的循环有两种，一种是for…in循环，依次把list或tuple中的每个元素迭代出来，看例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;]</span><br><span class="line">for name in names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p>执行这段代码，会依次打印<code>names</code>的每一个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Michael</span><br><span class="line">Bob</span><br><span class="line">Tracy</span><br></pre></td></tr></table></figure><p>所以<code>for x in ...</code>循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句。</p><p>再比如我们想计算1-10的整数之和，可以用一个<code>sum</code>变量做累加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为list。比如<code>range(5)</code>生成的序列是从0开始小于5的整数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(5))</span><br><span class="line">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><p><code>range(101)</code>就可以生成0-100的整数序列，计算如下：</p><p><code># -*- coding: utf-8 -*-</code>** Run</p><p>请自行运行上述代码，看看结果是不是当年高斯同学心算出的5050。</p><p>第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">n = 99</span><br><span class="line">while n &gt; 0:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - 2</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>提前退出循环</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环</p><h2 id="dict和set"><a href="#dict和set" class="headerlink" title="dict和set"></a>dict和set</h2><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><h4 id="is-what-2"><a href="#is-what-2" class="headerlink" title="is what"></a>is what</h4><p>dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p><p>与list相比的特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><h4 id="how-to-use-2"><a href="#how-to-use-2" class="headerlink" title="how to use"></a>how to use</h4><p>一个简单快速取成绩的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;&apos;Michael&apos;: 95, &apos;Bob&apos;: 75, &apos;Tracy&apos;: 85&#125;</span><br><span class="line">&gt;&gt;&gt; d[&apos;Michael&apos;]</span><br><span class="line">95</span><br></pre></td></tr></table></figure><p>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&apos;Adam&apos;] = 67</span><br><span class="line">&gt;&gt;&gt; d[&apos;Adam&apos;]</span><br><span class="line">67</span><br></pre></td></tr></table></figure><p>多次对一个key放入value，后面的值会把前面的值冲掉（一个key只能对应一个value）</p><p>如果key不存在，dict就会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d[&apos;Thomas&apos;]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &apos;Thomas&apos;</span><br></pre></td></tr></table></figure><p>但可以通过 <code>&#39;Thomas&#39; in d</code> <code>d.get(&#39;Thomas&#39;)</code> 来判断key是否存在（返回<code>None</code>的时候Python的交互环境不显示结果）</p><p>删除key（value也会被删除）：<code>pop(key)</code></p><p>dict内部存放的顺序和key放入的顺序是没有关系的</p><p>dict的key必须是<strong>不可变对象</strong> （因为dict根据key来计算value的存储位置，也就是hash算法）</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><h4 id="is-what-3"><a href="#is-what-3" class="headerlink" title="is what"></a>is what</h4><p>set和dict类似，也是一组key的集合，但不存储value，由于key不能重复，所以，在set中，没有重复的key</p><p>要创建一个set，需要提供一个list作为输入集合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure><p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>{1, 2, 3}</code>只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。</p><p>重复元素在set中自动被过滤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s.add(4)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">&gt;&gt;&gt; s.add(4)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><p>通过<code>remove(key)</code>方法可以删除元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s.remove(4)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s1 = set([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; s2 = set([2, 3, 4])</span><br><span class="line">&gt;&gt;&gt; s1 &amp; s2</span><br><span class="line">&#123;2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; s1 | s2</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure><p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006CQOKjgy1fp97udq7psj30eg07jwee.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;从c到python的一小时&quot;&gt;&lt;a href=&quot;#从c到python的一小时&quot; c
      
    
    </summary>
    
      <category term="python" scheme="https://bitongchong.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://bitongchong.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python2与3之间的版本区别（逐渐补充）</title>
    <link href="https://bitongchong.github.io/2018/03/11/201803112130/"/>
    <id>https://bitongchong.github.io/2018/03/11/201803112130/</id>
    <published>2018-03-11T13:36:39.465Z</published>
    <updated>2018-03-11T13:36:39.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006CQOKjgy1fp97agq29gj30dx08cglv.jpg" alt=""></p><h4 id="1、3-0以上的版本使用urllib-request-代替了urllib2，import的时候需要注意。"><a href="#1、3-0以上的版本使用urllib-request-代替了urllib2，import的时候需要注意。" class="headerlink" title="1、3.0以上的版本使用urllib.request 代替了urllib2，import的时候需要注意。"></a>1、3.0以上的版本使用urllib.request 代替了urllib2，import的时候需要注意。</h4><h4 id="2、python3使用print时，需要对打印内容加括号。"><a href="#2、python3使用print时，需要对打印内容加括号。" class="headerlink" title="2、python3使用print时，需要对打印内容加括号。"></a>2、python3使用print时，需要对打印内容加括号。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006CQOKjgy1fp97agq29gj30dx08cglv.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;1、3-0以上的版本使用urllib-request-代替了urllib2，imp
      
    
    </summary>
    
      <category term="python" scheme="https://bitongchong.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://bitongchong.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>sublime text3配置python3编译系统</title>
    <link href="https://bitongchong.github.io/2018/03/11/201803112111/"/>
    <id>https://bitongchong.github.io/2018/03/11/201803112111/</id>
    <published>2018-03-11T13:27:15.730Z</published>
    <updated>2018-03-12T10:25:41.845Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006CQOKjgy1fp96k910m5j30of0g6gra.jpg" alt=""></p><p>安装好sublime text3这款软件的时候，会有自带的编译系统。</p><p>但如果需要自己新建编译系统的时候，又怎么弄呢（不得不说的是，sublime3打开速度是真的快）？</p><hr><p><strong>点击工具→编译系统→编译新系统→输入以下代码</strong>，保存后输入名称python3，就能在编译系统中找到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    &quot;cmd&quot;: [&quot;python&quot;, &quot;$file&quot;],</span><br><span class="line">    &quot;file_regex&quot;: &quot;py$&quot;, </span><br><span class="line">    &quot;selector&quot;: &quot;source.python&quot;,</span><br><span class="line">    &quot;encoding&quot;: &quot;cp936&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>需要注意的是，<strong>python对缩进有着严格的要求，所以需要将tab设置为4个空格</strong>。</p><p>将以下两个选项打钩：<strong>缩进使用空格    标签宽度4</strong></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006CQOKjgy1fp96k910m5j30of0g6gra.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;安装好sublime text3这款软件的时候，会有自带的编译系统。&lt;/p&gt;
&lt;p&gt;但如果需
      
    
    </summary>
    
      <category term="编译器设置" scheme="https://bitongchong.github.io/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E8%AE%BE%E7%BD%AE/"/>
    
    
      <category term="编译器" scheme="https://bitongchong.github.io/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>VM虚拟机不能联网的问题解决方案</title>
    <link href="https://bitongchong.github.io/2018/02/26/201802261621/"/>
    <id>https://bitongchong.github.io/2018/02/26/201802261621/</id>
    <published>2018-02-26T09:01:35.031Z</published>
    <updated>2018-02-26T09:05:32.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>虚拟机刚开始安装完成的时候，能够正常访问网络，结果后面突然显示网络断开连接，网上找了很多方案，无果。后面自己鼓弄的时候修复好了，方案如下。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">打开虚拟网络编辑器</span><br><span class="line"></span><br><span class="line">点击更改设置</span><br><span class="line"></span><br><span class="line">再点击左下角的恢复默认按钮</span><br><span class="line"></span><br><span class="line">出来提示</span><br><span class="line"></span><br><span class="line">点是</span><br><span class="line"></span><br><span class="line">修复完成</span><br></pre></td></tr></table></figure><p>编辑中找到虚拟网络编辑器，找到如下界面，更改设置<img src="http://ww1.sinaimg.cn/large/006vT9TSgy1fotyi1sa9ij30ix063q4f.jpg" alt=""></p><p>点击还原默认设置，选是，修复完成<img src="http://ww1.sinaimg.cn/large/006vT9TSgy1fotyh9l9kxj30jp0aemz9.jpg" alt=""></p><h1 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h1><p>为了以后出现这种问题的时候有更多办法，我将其他解决方案附在下面：</p><h3 id="首先看看主机的网络连接有几个，主要是看看有没有VMnet1、VMnet8两个虚拟机的网络连接（关键是VMnet8）"><a href="#首先看看主机的网络连接有几个，主要是看看有没有VMnet1、VMnet8两个虚拟机的网络连接（关键是VMnet8）" class="headerlink" title="首先看看主机的网络连接有几个，主要是看看有没有VMnet1、VMnet8两个虚拟机的网络连接（关键是VMnet8）"></a>首先看看主机的网络连接有几个，主要是看看有没有VMnet1、VMnet8两个虚拟机的网络连接（关键是VMnet8）</h3><p>对于那些使用完全安装版的虚拟机就不用考虑这些了，因为完全安装版的VM安装好后一般这两个连接就有了。但是有很多网友使用的是精简版、绿色版的虚拟机，那就要首先看看这里。因为绿色版的需要单独安装虚拟机的网络服务，安装一般在下载的虚拟机目录内，一般名字叫做“安装.bat”或者“intall.dat”，运行它。可能版本不同名称不太一样，安装时主要把NAT服务安装上去就行了。如果你想用其他方式则把其他方式安装上。</p><p>另外，<strong>这里所有连接都不要设置Internet连接共享，NAT方式下虚拟机上网不需要设置共享</strong>。</p><h3 id="看看虚拟机的网络连接设置的对不对"><a href="#看看虚拟机的网络连接设置的对不对" class="headerlink" title="看看虚拟机的网络连接设置的对不对"></a>看看虚拟机的网络连接设置的对不对</h3><p>一般没有其他特殊要求，设置为NAT即可。</p><p>这两步好了后可以启动虚拟机试试了，要注意：<strong>在NAT方式下，虚拟机内本地连接不要自己设定IP，应该都是自动获取。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;虚拟机刚开始安装完成的时候，能够正常访问网络，结果后面突然显示网络断开连接，网上找了很多方案，无果。后面自己鼓弄的时候修复好了，方案如下。&lt;
      
    
    </summary>
    
      <category term="虚拟机" scheme="https://bitongchong.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="虚拟机出错" scheme="https://bitongchong.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%87%BA%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>一台电脑实现push不同仓库到两个github账号</title>
    <link href="https://bitongchong.github.io/2018/02/26/201802261152/"/>
    <id>https://bitongchong.github.io/2018/02/26/201802261152/</id>
    <published>2018-02-26T05:27:05.721Z</published>
    <updated>2018-02-26T08:14:28.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>吐槽：因为需要两个博客（hexo搭建），所以我需要在我这一台电脑上同时管理两个博客内容。但是对hexo的理解不是太深入，所以每次deploy都是直接push到我第一个账号中，于是便产生了这篇博客（如果有什么不成熟或错误的地方，等后面对hexo和git了解深入一点再来修改）。</p><p>不得不说的是，之前学的git知识还是不太熟练呀！在实现了同时存放多个rsa秘钥后还是不知道如何将另一个本地仓库push到github中，都打算用虚拟机来弄的了，要不是嫌配环境那些太麻烦，没准儿这篇博客就不是这样写的了。</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>在一台电脑上，实现push各自的仓库到两个github账号</p><p>（如何在一台电脑上存放多个git账户的多个rsa秘钥）</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="第一步：制造第一把公钥"><a href="#第一步：制造第一把公钥" class="headerlink" title="第一步：制造第一把公钥"></a>第一步：制造第一把公钥</h2><p>ssh-keygen -t rsa -C “<a href="mailto:A@XX.com" target="_blank" rel="noopener">A@XX.com</a>“</p><p>一直enter下去，出现id_rsa名称设置：</p><p>Enter file in which to save the key (.ssh/id_rsa): A</p><h2 id="第二步：制造第二把公钥"><a href="#第二步：制造第二把公钥" class="headerlink" title="第二步：制造第二把公钥"></a>第二步：制造第二把公钥</h2><p>ssh-keygen -t rsa -C “<a href="mailto:B@XX.com" target="_blank" rel="noopener">B@XX.com</a>“</p><p>一直enter下去，出现id_rsa名称设置：</p><p>Enter file in which to save the key (.ssh/id_rsa): B</p><h2 id="第三步：添加-pub-到后台ssh账户"><a href="#第三步：添加-pub-到后台ssh账户" class="headerlink" title="第三步：添加  .pub 到后台ssh账户"></a>第三步：添加  .pub 到后台ssh账户</h2><p>将X.PUB文件中的全部内容复制粘贴到ssh账户</p><h2 id="第四步：在ssh目录下配置config文件"><a href="#第四步：在ssh目录下配置config文件" class="headerlink" title="第四步：在ssh目录下配置config文件"></a>第四步：在ssh目录下配置config文件</h2><p>新建一个config.txt文件，输入以下内容，然后去掉后缀名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line"></span><br><span class="line">  HostName github.com</span><br><span class="line"></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line">  IdentityFile ~/.ssh/A</span><br><span class="line"></span><br><span class="line">Host my.github.com</span><br><span class="line"></span><br><span class="line">  HostName github.com</span><br><span class="line"></span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line">  IdentityFile ~/.ssh/B</span><br></pre></td></tr></table></figure><h2 id="第五步：测试"><a href="#第五步：测试" class="headerlink" title="第五步：测试"></a>第五步：测试</h2><p>在bash界面输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@A.github.com</span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi XXX! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>则第一个账号测试成功！</p><p>第二个账号同理，只需要按照config文件中的配置来修改一下git@后面的内容就OK！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@A.github.com</span><br></pre></td></tr></table></figure><p>当需要在一个仓库上PUSH提交的内容时，先解析出仓库地址（还不懂怎么解析，后面再补充），然后从该仓库的所属帐号中找到一把能解锁该提交的公钥。</p><h2 id="第六步：修改-config-yml"><a href="#第六步：修改-config-yml" class="headerlink" title="第六步：修改_config.yml"></a>第六步：修改_config.yml</h2><p>第一个账号：<img src="http://ww1.sinaimg.cn/large/006vT9TSgy1fotx1ezjkbj30ym063juf.jpg" alt=""></p><p>第二个账号（只需要按照config文件中的配置来修改一下git@后面的内容就OK，内容为之前设置的id_rsa名称）：</p><p><img src="http://ww1.sinaimg.cn/large/006vT9TSgy1fotx1zxmsrj30zu06cad3.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;吐槽：因为需要两个博客（hexo搭建），所以我需要在我这一台电脑上同时管理两个博客内容。但是对hexo的理解不是太深入，所以每次deploy
      
    
    </summary>
    
      <category term="GIT" scheme="https://bitongchong.github.io/categories/GIT/"/>
    
    
      <category term="git学习" scheme="https://bitongchong.github.io/tags/git%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>绑定github上的博客到个人域名</title>
    <link href="https://bitongchong.github.io/2018/02/26/201802261053/"/>
    <id>https://bitongchong.github.io/2018/02/26/201802261053/</id>
    <published>2018-02-26T03:28:44.897Z</published>
    <updated>2018-02-26T03:36:19.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h1><p>实现将托管在github上的个人博客绑定到万网域名的流程</p><h1 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h1><p>1、购买域名（这里用的阿里云），备案(实名认证)</p><p>2、在github根目录添加CNAME，内容为<a href="http://www.xxx.com(去掉http://)" target="_blank" rel="noopener">www.xxx.com(去掉http://)</a></p><p><img src="http://ww1.sinaimg.cn/large/006vT9TSly1fotobpphyij30z70bqgm8.jpg" alt=""></p><p><code>注:如果不添加www，域名访问时就不能加www，否则会出错</code></p><p><code>如果是hexo搭建的，直接将文件存放在source文件夹下，hexo g &amp; hexo d，就能将文件上传到github根目录中</code></p><p>3、点进项目文件夹，点击setting，向下滑，将你购买的域名填写在Custom domain中（去掉http://），点击save</p><p><img src="http://ww1.sinaimg.cn/large/006vT9TSly1fotohov8udj30mx05qdi1.jpg" alt=""></p><p>4、转到阿里云域名管理界面，点击解析</p><p><img src="http://ww1.sinaimg.cn/large/006vT9TSly1foton3ekxrj317903fjsl.jpg" alt=""></p><p>可以点击新手引导，直接填写网址</p><p><img src="http://ww1.sinaimg.cn/large/006vT9TSly1fotona78nej30w50gw78u.jpg" alt=""></p><p>填写的内容可以直接CMD去ping你的博客得到</p><p><img src="http://ww1.sinaimg.cn/large/006vT9TSly1fotozkcqirj30xr07oq8t.jpg" alt=""></p><p>也可以自己按需求配置</p><p><img src="http://ww1.sinaimg.cn/large/006vT9TSly1fotonir94hj312t0hp0yh.jpg" alt=""></p><p>配置完成后，就可以通过购买的域名访问你的github网站了</p><p>注：关于记录类型的解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A记录： 将域名指向一个IPv4地址（例如：8.8.8.8）</span><br><span class="line">CNAME：将域名指向另一个域名（例如www.qcloud.com）</span><br><span class="line">MX： 将域名指向邮件服务器地址</span><br><span class="line">TXT： 可任意填写，长度限制255，通常做SPF记录（反垃圾邮件）</span><br><span class="line">NS： 域名服务器记录，将子域名指定其他DNS服务器解析</span><br><span class="line">AAAA：将域名指向一个iPv6地址（例如：ff06:0:0:0:0:0:0:c3）</span><br><span class="line">SRV：记录提供特定服务的服务器（例如_xmpp-server._tcp）</span><br></pre></td></tr></table></figure><p>关于主机类型记录的解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">www： 解析后的域名为www.qcloud.com。</span><br><span class="line">@： 直接解析主域名 qcloud.com。</span><br><span class="line">*： 泛解析，匹配其他所有域名 *.qcloud.com。</span><br><span class="line">mail： 将域名解析为mail.qcloud.com，通常用于解析邮箱服务器。</span><br><span class="line">二级域名： 如：abc.qcloud.com，填写abc。</span><br><span class="line">手机网站： 如：m.qcloud.com，填写m</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求：&quot;&gt;&lt;a href=&quot;#需求：&quot; class=&quot;headerlink&quot; title=&quot;需求：&quot;&gt;&lt;/a&gt;需求：&lt;/h1&gt;&lt;p&gt;实现将托管在github上的个人博客绑定到万网域名的流程&lt;/p&gt;
&lt;h1 id=&quot;流程：&quot;&gt;&lt;a href=&quot;#流程：&quot; class
      
    
    </summary>
    
      <category term="网站建设" scheme="https://bitongchong.github.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="博客搭建" scheme="https://bitongchong.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>win10操作小技巧（逐渐补充）</title>
    <link href="https://bitongchong.github.io/2018/02/23/20182231501/"/>
    <id>https://bitongchong.github.io/2018/02/23/20182231501/</id>
    <published>2018-02-23T07:06:06.967Z</published>
    <updated>2018-02-23T09:14:22.648Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006vT9TSgy1foqhxkoi0jj318g0xctwb.jpg" alt="windows"></p><p>Ctrl+z撤销操作</p><p>Ctrl+r回复操作</p><p>win+ctrl+d新建虚拟桌面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006vT9TSgy1foqhxkoi0jj318g0xctwb.jpg&quot; alt=&quot;windows&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ctrl+z撤销操作&lt;/p&gt;
&lt;p&gt;Ctrl+r回复操作&lt;/p&gt;
&lt;p&gt;win
      
    
    </summary>
    
      <category term="win10操作" scheme="https://bitongchong.github.io/categories/win10%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="win10" scheme="https://bitongchong.github.io/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>关于在Ubuntu16.04上部署open-edx-ginkgo的流程与注意事项</title>
    <link href="https://bitongchong.github.io/2018/02/23/20182231452/"/>
    <id>https://bitongchong.github.io/2018/02/23/20182231452/</id>
    <published>2018-02-23T06:51:10.768Z</published>
    <updated>2018-02-23T06:55:12.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于在Ubuntu16-04上部署open-edx-ginkgo的流程与注意事项"><a href="#关于在Ubuntu16-04上部署open-edx-ginkgo的流程与注意事项" class="headerlink" title="关于在Ubuntu16.04上部署open-edx-ginkgo的流程与注意事项"></a><strong>关于在Ubuntu16.04上部署open-edx-ginkgo的流程与注意事项</strong></h1><p>现在网上很多关于edx框架安装的教程都有很多坑，对新手极其不友好。</p><p>按照他们的流程弄可能会走很多弯路，比如：直接用官方的流程网速奇慢，有些task要么超时、要么找不到安装包、有的直接报错等。</p><p>后面看其他博客的时候才知道这样安装的成功率很低很低，因为网络原因（那堵墙）。于是打算换一种方式部署。</p><p>正好，种瓜和zen这两位大佬在edx交流群里面制作出了open edx最新版的镜像，测试了一下，可以正常运行，下面是安装的详细流程（适用人群：初次接触edx框架的新手）。</p><h1 id="O-前提准备："><a href="#O-前提准备：" class="headerlink" title="Ø 前提准备："></a>Ø 前提准备：</h1><ol><li>VMware10或者其他版本</li><li>open-edx-ginkgo镜像</li><li>一台内存4G以上的PC</li><li>（可选）Ubuntu 16.04</li></ol><h1 id="O-安装流程："><a href="#O-安装流程：" class="headerlink" title="Ø 安装流程："></a>Ø 安装流程：</h1><ol><li><p>首先<strong>确保电脑内存有4G以上</strong>，因为4G内存是ginkgo正常部署运行的最低标准。最好4G以上，不够的可以在淘宝上买一根内存条，因为之前我用4G内存的电脑操作卡到心态爆炸。</p></li><li><p>安装VMware10，具体流程参考这个链接（*注解链接1），这个很简单，没什么坑，激活码在群文件里有。</p></li><li><p>下载open-edx-ginkgo的ova文件，下载链接（*注解链接2，两种下载方式都可以）。</p></li><li><p>载入镜像文件（按照图片流程操作）：</p></li></ol><p>（↓下载好后直接点击文件——&gt;打开）</p><p> <img src="http://img.blog.csdn.net/20180122233956784?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>（↓找到你下载的镜像文件）</p><p>​    <img src="http://img.blog.csdn.net/20180122234010892?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>（↓点击打开后导入虚拟机，存储路径就是以后这台虚拟机的运行路径，以后涉及到这台Ubuntu的所有操作都在这个文件夹下面执行）</p><p><img src="http://img.blog.csdn.net/20180122234025396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>（↓完成后直接导入，这个过程有点长，等就是）</p><p> <img src="http://img.blog.csdn.net/20180122234036497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>（↓完成之后在我的计算机那儿会多一个虚拟机，到时候直接点击开启此虚拟机）</p><p> <img src="http://img.blog.csdn.net/20180122234048443?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>（↓在打开后会是一个登陆界面，直接输入账号密码就好。这个时候可能会出现输入账号时不显示的问题，这个不用管，以后运行就不会出现了。密码输入是不会显示的，输入完成后直接回车）</p><p>​       <img src="http://img.blog.csdn.net/20180122234100812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>（↓登陆成功后是这个界面，输入命令  ifconfig -a  ，找到如图所示的IP地址。这个时候只要你的Ubuntu连上了网络的，你就可以在局域网内通过输入这个IP地址访问这个网站了。）</p><p><img src="http://img.blog.csdn.net/20180122234112667?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>（↓比如我的虚拟机IP为192.168.253.123，在win10的浏览器里输入后就可以直接访问预览了）</p><p> <img src="http://img.blog.csdn.net/20180122234124088?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><ol><li><p>到这儿框架就安装好了。</p><p><img src="http://img.blog.csdn.net/20180122234139973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NTcxNzU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p></li></ol><h1 id="O-相关注意事项："><a href="#O-相关注意事项：" class="headerlink" title="Ø 相关注意事项："></a>Ø 相关注意事项：</h1><p>1.硬件配置 1CPU/<strong>4G RAM</strong>/500G HD</p><p>2.Ubuntu用户 <strong>edustack</strong>，密码<strong>edustack.org</strong></p><p>3.没有生成随机密码，各种系统服务都使用默认密码。</p><p>4.这个镜像是Ubuntu服务器版本，也就是<strong>没有图形界面（GUI）</strong>的。后面如果要对Linux和Python进行深入学习的话，可以安装一个桌面版本的Ubuntu，下载地址网上一大堆。安装流程在（*注解链接3），可以去看一看。</p><h1 id="O-注解链接："><a href="#O-注解链接：" class="headerlink" title="Ø 注解链接："></a>Ø 注解链接：</h1><p>链接1：<a href="https://jingyan.baidu.com/article/9c69d48f488f6813c9024e99.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/9c69d48f488f6813c9024e99.html</a></p><p>链接2：</p><p><a href="http://202.196.166.180/downloads/%E5%AE%9E%E9%AA%8C%E8%BD%AF%E4%BB%B6/%E9%95%9C%E5%83%8F/edustack-ginkgo2.ova" target="_blank" rel="noopener">http://202.196.166.180/downloads/%E5%AE%9E%E9%AA%8C%E8%BD%AF%E4%BB%B6/%E9%95%9C%E5%83%8F/edustack-ginkgo2.ova</a></p><p>百度网盘  <a href="https://pan.baidu.com/s/1qZ8QIsO" target="_blank" rel="noopener">https://pan.baidu.com/s/1qZ8QIsO</a> 密码：fxaz</p><p>链接3：<a href="https://jingyan.baidu.com/article/14bd256e0ca52ebb6d26129c.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/14bd256e0ca52ebb6d26129c.html</a></p><p>关于open-edx更多更详细的内容，推荐大家到这里去看看：<a href="https://www.edustack.org/" target="_blank" rel="noopener">https://www.edustack.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于在Ubuntu16-04上部署open-edx-ginkgo的流程与注意事项&quot;&gt;&lt;a href=&quot;#关于在Ubuntu16-04上部署open-edx-ginkgo的流程与注意事项&quot; class=&quot;headerlink&quot; title=&quot;关于在Ubuntu16.
      
    
    </summary>
    
      <category term="open edx框架" scheme="https://bitongchong.github.io/categories/open-edx%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="edx" scheme="https://bitongchong.github.io/tags/edx/"/>
    
  </entry>
  
  <entry>
    <title>关于 hexo d 报错解决办法</title>
    <link href="https://bitongchong.github.io/2018/02/23/201802231423/"/>
    <id>https://bitongchong.github.io/2018/02/23/201802231423/</id>
    <published>2018-02-23T06:38:38.607Z</published>
    <updated>2018-02-26T08:05:22.543Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006vT9TSgy1foqi2af9abj30go09bjss.jpg" alt=""></p><h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><p>今天更新博客时突然发现更新失败，错误信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nothing to commit, working tree clean</span><br><span class="line">fatal: &apos;http：//www.github.com/bitongchong/bitongchong.github.io.git&apos; does not appear to be a git repository</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: fatal: &apos;http：//www.github.com/bitongchong/bitongchong.github.io.git&apos; does not appear to be a git repository</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: http：//www.github.com/bitongchong/bitongchong.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: ssh://git@github.com/bitongchong/bitongchong.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006vT9TSgy1foqi2af9abj30go09bjss.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="网站建设" scheme="https://bitongchong.github.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="博客搭建" scheme="https://bitongchong.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建博客</title>
    <link href="https://bitongchong.github.io/2018/02/22/20180223/"/>
    <id>https://bitongchong.github.io/2018/02/22/20180223/</id>
    <published>2018-02-22T09:18:50.723Z</published>
    <updated>2018-02-26T08:18:42.765Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006vT9TSgy1foqi4i1yauj30di07laaj.jpg" alt=""></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>前几天突然心血来潮，想搭建一个自己的博客来保存自己的学习笔记，在借鉴了几篇文章后搭建成功 。</p><p>下面是详细步骤以及遇到的一些坑（内容基本与参考文章相似，修改了一些地方）。<br>最终效果：<a href="https://bitongchong.github.io/">BITC’S BLOG</a></p><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/32263486" target="_blank" rel="noopener">免费快速搭建博客教程，Hexo&amp;GitHub</a></p><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a><strong>搭建步骤：</strong></h2><h3 id="一、获得个人网站域名（可选）"><a href="#一、获得个人网站域名（可选）" class="headerlink" title="一、获得个人网站域名（可选）"></a>一、获得个人网站域名（可选）</h3><p>阿里云注册购买一个域名，并且将之解析。</p><h3 id="二、配置github"><a href="#二、配置github" class="headerlink" title="二、配置github"></a>二、配置github</h3><ol><li><p>登录GitHub</p></li><li><p>保留Username</p></li><li><p>新建repositories（新账号随便搜索一个项目fork，回到主页后就能在网页右边看到）</p></li><li><p>Repository name （填自己的名字） <strong><a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a></strong>(yourname与你的注册用户名一致,这个就是你博客的域名了。例如，我的域名是<a href="https://link.zhihu.com/?target=http%3A//github.com/wuxingggg" target="_blank" rel="noopener">http://github.com/bitongchong</a>，就填入<a href="http://bitongchong.github.io">http://bitongchong.github.io</a>)</p></li></ol><h3 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h3><ol><li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装Node.js</a></p></li><li><p><a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">安装Git</a></p></li><li><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，进入</p></li><li><p>$ git config –global user.name “username”</p></li><li><p>$ git config –global user.email “xxx”</p></li><li><p>cmd中输入npm install -g hexo-cli（管理员权限）</p></li><li><p>(npm在你安装Node.js时就安装了)这个过程会比较久，如果出现WARN错误可以忽略。我记得当时，每次都会出现说有一个依赖包已经不更新，这个不影响。</p><p>注：4、5是是两个短横线；username和xxx都是随意设置；引号需要添加</p></li></ol><h3 id="四、网站代码以及设置"><a href="#四、网站代码以及设置" class="headerlink" title="四、网站代码以及设置"></a>四、网站代码以及设置</h3><ol><li>自己在C盘创建一个test文件夹，cmd内cd进入test文件夹（管理员权限！一定得有）</li><li>输入hexo init blog（忽视WARNING）</li></ol><ul><li>_config.yml，网站的 配置 信息，在此配置大部分参数。</li><li>source，资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为</em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li><li>themes，主题文件夹。Hexo 会根据主题来生成静态页面。</li></ul><ol><li>提示Start blogging with Hexo，安装成功</li><li>文件夹中自带一篇文章“Hello World”</li><li>命令行进入blog目录下</li><li>输入hexo g，生存静态文件</li><li>输入hexo s，启动服务器。默认情况下，访问网址为： <a href="https://link.zhihu.com/?target=http%3A//localhost%3A4000/" target="_blank" rel="noopener">http://localhost:4000/</a></li><li>打开git bash，输入：ssh-keygen -t rsa -C “Github的注册邮箱地址”</li></ol><p>一直Enter过来，得到信息：<br>Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub.</p><ol><li><p>找到该文件，打开（sublime text），Ctrl + a复制里面的所有内容，然后进入Sign in to GitHub：<a href="https://link.zhihu.com/?target=https%3A//github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a></p></li><li><p>New SSH key ——Title：blog —— Key：输入刚才复制的—— Add SSH key</p></li></ol><h3 id="五、博客网站配置信息"><a href="#五、博客网站配置信息" class="headerlink" title="五、博客网站配置信息"></a>五、博客网站配置信息</h3><ol><li>进入blog网站，用sublime打开_config.yml文件（博客基本配置信息），修改参数</li><li><strong>每个参数的：后都要加一个空格</strong></li><li>hexo框架的blog基础信息，按照自己设置就行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: BITC&apos;BLOG</span><br><span class="line">subtitle: DO YOUR WORK</span><br><span class="line">description: BIJI</span><br><span class="line">author: BITC</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure><p>4.部署服务器的相关配置信息，只需要修改repo部分，username设置为你的username</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>6.各类主题的配置信息，要在主题文件夹内的_config.yml上进行配置！</p><h3 id="六、发表文章"><a href="#六、发表文章" class="headerlink" title="六、发表文章"></a>六、发表文章</h3><ol><li>进入blog文件夹下，输入hexo new “Hello blog”</li><li>打开info中的地址，打开文件。</li><li>文章内容采用Markdown语法进行编辑，需要用相关软件才能打开这个文件</li><li><a href="http://note.youdao.com/iyoudao/?p=2411&amp;vendor=unsilent14" target="_blank" rel="noopener">Markdown编辑使用说明</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello blog</span><br><span class="line">date: </span><br><span class="line">tags: 测试</span><br><span class="line">---</span><br><span class="line">测试文章，欢迎关注作者博客: https://wuxingggg.github.io/</span><br><span class="line">虽然啥子都没有，以后慢慢补充</span><br></pre></td></tr></table></figure><p>6.执行以下步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\test\blog</span><br><span class="line">$ hexo clean</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br><span class="line"></span><br><span class="line">C:\test\blog</span><br><span class="line">$ hexo generate</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 1.48 s</span><br><span class="line">...</span><br><span class="line">INFO  29 files generated in 4.27 s</span><br><span class="line"></span><br><span class="line">C:\test\blog</span><br><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>7.<a href="https://link.zhihu.com/?target=http%3A//localhost%3A4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 打开后检查，没问题后部署到服务器上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\test\blog</span><br><span class="line">$ hexo deploy</span><br><span class="line">INFO  Deploying: git</span><br></pre></td></tr></table></figure><ul><li><p>其中，可能会出现github登录界面，正常填写就行</p></li><li><p>hexo deploy 后,出现 error deployer not found:git 的错误，输入以下代码</p></li><li><ul><li>npm install hexo-deployer-git –save</li><li>再次hexo deploy</li></ul></li></ul><h3 id="七、主题设置"><a href="#七、主题设置" class="headerlink" title="七、主题设置"></a>七、主题设置</h3><p>主题设置中，最好玩的就是尝试各式各样的主题啦~</p><p><a href="https://link.zhihu.com/?target=https%3A//hexo.io/themes/" target="_blank" rel="noopener">官方hexo主题大全</a>，里面有许多主题都能尝试一下。</p><p>在这里推荐几个主题：</p><ul><li><a href="https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next官网</a></li><li><a href="https://link.zhihu.com/?target=https%3A//mt.viosey.com/" target="_blank" rel="noopener">Material官网</a>，<a href="https://link.zhihu.com/?target=https%3A//github.com/viosey/hexo-theme-material/" target="_blank" rel="noopener">Git</a></li></ul><ol><li>主题配置，首先要下载主题，到相应的Git链接，比如，<a href="https://link.zhihu.com/?target=https%3A//github.com/viosey/hexo-theme-material/releases/tag/1.4.0" target="_blank" rel="noopener">Material</a>下载Source code (zip)</li><li>下载完以后将文件解压缩后放到blog中的themes文件夹中</li><li>修改主题文件夹名称，将其改为 XXX（任意设置） 。，然后打开 站点配置文件，找到 theme 字段，并将其值更改为 XXX</li><li>手动将 material 文件夹中的 _config.template.yaml 复制一份并重命名为 _config.yaml</li><li>接下来，打开主题相应的博客中的文档说明，对比“主题”中的_config.yaml，针对自己需要的功能进行相关设置</li><li>有关设置中的图片，统一放到主题文件夹内\source\img。在设置中，用”/img/xigua.jpg”类似格式进行图片设置。</li><li>设置时切记 : 后面要加一个空格。</li><li>最后再重新进行一次，hexo clean,hexo g,hexo s,hexo deploy 整个博客就完成主题修改啦</li></ol><h3 id="八、其他问题"><a href="#八、其他问题" class="headerlink" title="八、其他问题"></a>八、其他问题</h3><p>在配置文件中，这一栏需要改为自己的网址，否则会出现搜索功能不能使用或跳转到错误网址等问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:subtitle/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://bitongchong.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:subtitle/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006vT9TSgy1foqi4i1yauj30di07laaj.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="网站建设" scheme="https://bitongchong.github.io/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="博客搭建" scheme="https://bitongchong.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>廖雪峰git学习笔记</title>
    <link href="https://bitongchong.github.io/2018/02/18/2018219949/"/>
    <id>https://bitongchong.github.io/2018/02/18/2018219949/</id>
    <published>2018-02-18T07:55:07.390Z</published>
    <updated>2018-02-19T09:42:42.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h2><ul><li>Git是分布式版本控制系统</li><li>集中式VS分布式，SVN VS Git<br>1）SVN和Git主要的区别在于历史版本维护的位置<br>2）这两个工具主要的区别在于历史版本维护的位置Git本地仓库包含代码库还有历史库，在本地的环境开发就可以记录历史而SVN的历史库存在于中央仓库，每次对比与提交代码都必须连接到中央仓库才能进行。<br>3）这样的好处在于：<ul><li>自己可以在脱机环境查看开发的版本历史。</li><li>多人开发时如果充当中央仓库的Git仓库挂了，可以随时创建一个新的中央仓库然后同步就立刻恢复了中央库。<h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><code>git config</code>命令的<code>--global</code>参数，表明这台机器上的所有Git仓库都会使用这个配置，也可以对某个仓库指定不同的用户名和邮箱地址。</p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><h4 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h4 id="添加文件到Git仓库"><a href="#添加文件到Git仓库" class="headerlink" title="添加文件到Git仓库"></a>添加文件到Git仓库</h4><p>包括两步：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;file&gt;</span><br><span class="line">$ git commit -m <span class="string">"description"</span></span><br></pre></td></tr></table></figure></p><p><code>git add</code>可以反复多次使用，添加多个文件，<code>git commit</code>可以一次提交很多文件，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容。</p><h3 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a>查看工作区状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD -- &lt;file&gt;</span><br></pre></td></tr></table></figure><ul><li><code>git diff</code> 可以查看工作区(work dict)和暂存区(stage)的区别</li><li><code>git diff --cached</code> 可以查看暂存区(stage)和分支(master)的区别</li><li><code>git diff HEAD -- &lt;file&gt;</code> 可以查看工作区和版本库里面最新版本的区别<h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li></ul><p>简化日志输出信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure></p><h3 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a>查看命令历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>以上命令是返回上一个版本，在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>。</p><h3 id="回退指定版本号"><a href="#回退指定版本号" class="headerlink" title="回退指定版本号"></a>回退指定版本号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit_id</span><br></pre></td></tr></table></figure><p>commit_id是版本号，是一个用SHA1计算出的序列</p><h3 id="工作区、暂存区和版本库"><a href="#工作区、暂存区和版本库" class="headerlink" title="工作区、暂存区和版本库"></a>工作区、暂存区和版本库</h3><p>工作区：在电脑里能看到的目录；<br>版本库：在工作区有一个隐藏目录<code>.git</code>，是Git的版本库。<br>Git的版本库中存了很多东西，其中最重要的就是称为stage（或者称为index）的暂存区，还有Git自动创建的<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code>。</p><p><img src="http://ww1.sinaimg.cn/large/006vT9TSly1folu0118noj30cq06ijri.jpg" alt="理解"></p><p>进一步解释一些命令：</p><ul><li><code>git add</code>实际上是把文件添加到暂存区</li><li><code>git commit</code>实际上是把暂存区的所有内容提交到当前分支<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><h4 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ul><p>该命令是指将文件在工作区的修改全部撤销，这里有两种情况：</p><ol><li>一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li><li>一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li></ol><p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p><h4 id="丢弃暂存区的修改"><a href="#丢弃暂存区的修改" class="headerlink" title="丢弃暂存区的修改"></a>丢弃暂存区的修改</h4><p>分两步：<br>第一步，把暂存区的修改撤销掉(unstage)，重新放回工作区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure></p><p>第二步，撤销工作区的修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></p><p>小结：</p><ol><li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- &lt;file&gt;</code>。</li><li><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了第一步，第二步按第一步操作。</p></li><li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，前提是没有推送到远程库。</p></li></ol><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;file&gt;</span><br></pre></td></tr></table></figure><p><code>git rm &lt;file&gt;</code>相当于执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm &lt;file&gt;</span><br><span class="line">$ git add &lt;file&gt;</span><br></pre></td></tr></table></figure></p><h4 id="进一步的解释"><a href="#进一步的解释" class="headerlink" title="进一步的解释"></a>进一步的解释</h4><p>Q：比如执行了<code>rm text.txt</code> 误删了怎么恢复？<br>A：执行<code>git checkout -- text.txt</code> 把版本库的东西重新写回工作区就行了<br>Q：如果执行了<code>git rm text.txt</code>我们会发现工作区的text.txt也删除了，怎么恢复？<br>A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset head text.txt</span><br><span class="line">$ git checkout -- text.txt</span><br></pre></td></tr></table></figure></p><p>Q：如果真的想从版本库里面删除文件怎么做？<br>A：执行<code>git commit -m &quot;delete text.txt&quot;</code>，提交后最新的版本库将不包含这个文件</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><h4 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/username/repositoryname.git</span><br></pre></td></tr></table></figure><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p><code>-u</code> 表示第一次推送master分支的所有内容，此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p><h4 id="从远程克隆"><a href="#从远程克隆" class="headerlink" title="从远程克隆"></a>从远程克隆</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/usern/repositoryname.git</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h4 id="创建-切换分支"><a href="#创建-切换分支" class="headerlink" title="创建+切换分支"></a>创建+切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h4 id="合并某分支到当前分支"><a href="#合并某分支到当前分支" class="headerlink" title="合并某分支到当前分支"></a>合并某分支到当前分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h4 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用<code>git log --graph</code>命令可以看到分支合并图。</p><h4 id="普通模式合并分支"><a href="#普通模式合并分支" class="headerlink" title="普通模式合并分支"></a>普通模式合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">"description"</span> &lt;branchname&gt;</span><br></pre></td></tr></table></figure><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，能看出来曾经做过合并，包含作者和时间戳等信息，而fast forward合并就看不出来曾经做过合并。</p><h4 id="保存工作现场"><a href="#保存工作现场" class="headerlink" title="保存工作现场"></a>保存工作现场</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure><h4 id="查看工作现场"><a href="#查看工作现场" class="headerlink" title="查看工作现场"></a>查看工作现场</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure><h4 id="恢复工作现场"><a href="#恢复工作现场" class="headerlink" title="恢复工作现场"></a>恢复工作现场</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h4 id="丢弃一个没有合并过的分支"><a href="#丢弃一个没有合并过的分支" class="headerlink" title="丢弃一个没有合并过的分支"></a>丢弃一个没有合并过的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D &lt;branchname&gt;</span><br></pre></td></tr></table></figure><h4 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h4 id="在本地创建和远程分支对应的分支"><a href="#在本地创建和远程分支对应的分支" class="headerlink" title="在本地创建和远程分支对应的分支"></a>在本地创建和远程分支对应的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b branch-name origin/branch-name，</span><br></pre></td></tr></table></figure><p>本地和远程分支的名称最好一致；</p><h4 id="建立本地分支和远程分支的关联"><a href="#建立本地分支和远程分支的关联" class="headerlink" title="建立本地分支和远程分支的关联"></a>建立本地分支和远程分支的关联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --<span class="built_in">set</span>-upstream branch-name origin/branch-name；</span><br></pre></td></tr></table></figure><h4 id="从本地推送分支"><a href="#从本地推送分支" class="headerlink" title="从本地推送分支"></a>从本地推送分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin branch-name</span><br></pre></td></tr></table></figure><p>如果推送失败，先用git pull抓取远程的新提交；</p><h4 id="从远程抓取分支"><a href="#从远程抓取分支" class="headerlink" title="从远程抓取分支"></a>从远程抓取分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure><p>如果有冲突，要先处理冲突。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p><h4 id="新建一个标签"><a href="#新建一个标签" class="headerlink" title="新建一个标签"></a>新建一个标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id。</p><h4 id="指定标签信息"><a href="#指定标签信息" class="headerlink" title="指定标签信息"></a>指定标签信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</span><br></pre></td></tr></table></figure><p><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息。</p><h4 id="PGP签名标签"><a href="#PGP签名标签" class="headerlink" title="PGP签名标签"></a>PGP签名标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -s &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</span><br></pre></td></tr></table></figure><p><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签。</p><h4 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure><h4 id="推送一个本地标签"><a href="#推送一个本地标签" class="headerlink" title="推送一个本地标签!"></a>推送一个本地标签!</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin &lt;tagname&gt;</span><br></pre></td></tr></table></figure><h4 id="推送全部未推送过的本地标签"><a href="#推送全部未推送过的本地标签" class="headerlink" title="推送全部未推送过的本地标签"></a>推送全部未推送过的本地标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure><h4 id="删除一个本地标签"><a href="#删除一个本地标签" class="headerlink" title="删除一个本地标签"></a>删除一个本地标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d &lt;tagname&gt;</span><br></pre></td></tr></table></figure><h4 id="删除一个远程标签"><a href="#删除一个远程标签" class="headerlink" title="删除一个远程标签"></a>删除一个远程标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git介绍&quot;&gt;&lt;a href=&quot;#Git介绍&quot; class=&quot;headerlink&quot; title=&quot;Git介绍&quot;&gt;&lt;/a&gt;Git介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Git是分布式版本控制系统&lt;/li&gt;
&lt;li&gt;集中式VS分布式，SVN VS Git&lt;br&gt;1）SVN和
      
    
    </summary>
    
      <category term="GIT" scheme="https://bitongchong.github.io/categories/GIT/"/>
    
    
      <category term="git学习" scheme="https://bitongchong.github.io/tags/git%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
